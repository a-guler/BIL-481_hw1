/*
 * This Java source file was generated by the Gradle 'init' task.
 */
package BIL._hw1;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.Map;
import java.awt.geom.Point2D;

import static spark.Spark.get;
import static spark.Spark.port;
import static spark.Spark.post;

import spark.ModelAndView;
import spark.template.mustache.MustacheTemplateEngine;



public class App {
    public String getGreeting() {
        return "Hello World!";
    }


    public static ArrayList<Point2D> calculateNearestEmergencies(ArrayList<Point2D> emergencyLocations,Point2D location, int closest){
      if( emergencyLocations == null || emergencyLocations.size() == 0 )
        return new ArrayList<Point2D>();  
      
      ArrayList<Double> distances = new ArrayList<Double>();
        for(int i = 0; i<emergencyLocations.size();i++)
          distances.add(location.distance(emergencyLocations.get(i)));


        ArrayList<Point2D> closestEmergencies = new ArrayList<Point2D>(); 
        int cap = closest;
        if(closest > emergencyLocations.size())
          cap = emergencyLocations.size(); 
        for(int i =0; i<cap; i++){
          int smallest = 0;
          for(int j = 1; j<emergencyLocations.size(); j++){
            if(distances.get(j) < distances.get(smallest))
              smallest = j;
          }
          closestEmergencies.add(emergencyLocations.get(smallest));
          distances.set(smallest,Double.MAX_VALUE);
        }
      return closestEmergencies;
    }
    public static void main(String[] args) {
        port(getHerokuAssignedPort());

        post("/", (req, res) -> {
          String input1 = req.queryParams("input1");
          java.util.Scanner sc1 = new java.util.Scanner(input1);
          sc1.useDelimiter("[;\r\n]+");
          java.util.ArrayList<Point2D> inputList = new java.util.ArrayList<>();
          while (sc1.hasNext())
          {
            java.util.Scanner sc2 = new java.util.Scanner(sc1.next().replaceAll("\\s",""));
            sc2.useDelimiter(",");
            Point2D point = new Point2D.Double(Double.parseDouble(sc2.next()),Double.parseDouble(sc2.next()));
            System.out.println("X:"+point.getX()+" Y:" + point.getY());
            inputList.add(point);
          }
          sc1.close();



          java.util.Scanner sc3 = new java.util.Scanner(req.queryParams("input2").replaceAll("\\s",""));
          sc3.useDelimiter(",");
          Point2D input2AsPoint2D = new Point2D.Double(Double.parseDouble(sc3.next()),Double.parseDouble(sc3.next()));
          sc3.close();
          System.out.println("Ambulance Location:"+input2AsPoint2D);
          

          String input3 = req.queryParams("input3").replaceAll("\\s","");
          int input3AsInt = Integer.parseInt(input3);
          System.out.println("input3:"+ input3AsInt);

          inputList = calculateNearestEmergencies(inputList,input2AsPoint2D,input3AsInt);
          String result = "";
          for(Point2D emg:inputList){
            result = result + "(" +emg.getX() + ","+ emg.getY() +") ";
          }
          System.out.println("result:"+result);

          Map<String, String> map = new HashMap<String, String>();
          map.put("result", result);
          return new ModelAndView(map, "compute.mustache");
        }, new MustacheTemplateEngine());

        get("/",
            (rq, rs) -> {
              Map<String, String> map = new HashMap<String, String>();
              map.put("result", "not computed yet!");
              return new ModelAndView(map, "compute.mustache");
            },
            new MustacheTemplateEngine());
    }

    static int getHerokuAssignedPort() {
        ProcessBuilder processBuilder = new ProcessBuilder();
        if (processBuilder.environment().get("PORT") != null) {
            return Integer.parseInt(processBuilder.environment().get("PORT"));
        }
        return 4567; //return default port if heroku-port isn't set (i.e. on localhost)
    }
    
}
